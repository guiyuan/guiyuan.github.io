<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>桂圆的那些破事</title>
 <link href="https://guiyuan.github.io/atom.xml" rel="self"/>
 <link href="https://guiyuan.github.io/"/>
 <updated>2014-12-25T15:33:28+08:00</updated>
 <id>https://guiyuan.github.io</id>
 <author>
   <name>Guiyuan Ji</name>
   <email></email>
 </author>

 
 <entry>
   <title>正则表达式</title>
   <link href="https://guiyuan.github.io/unmarked/2014/12/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
   <updated>2014-12-25T23:21:34+08:00</updated>
   <id>https://guiyuan.github.io/unmarked/2014/12/25/正则表达式基础</id>
   <content type="html">&lt;p&gt;正则表达式是一种查找以及字符串替换操作。正则表达式在文本编辑器中广泛使用，比如正则表达式被用于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;检查文本中是否含有指定的特征词&lt;/li&gt;
  &lt;li&gt;找出文中匹配特征词的位置&lt;/li&gt;
  &lt;li&gt;从文本中提取信息，比如：字符串的子串&lt;/li&gt;
  &lt;li&gt;修改文本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前的工作中正则表达式接触的少，可能是因为不熟悉所以很多地方本来可以用正则表达式很方便解决的问题直接绕过去了，今天刚好看到一篇文章写的很好，就认真看了下，对正则表达式的基本语法有了一个深入的了解。不过想要用好的话还得更加深入的研究研究，最好能解决实际的问题。&lt;/p&gt;

&lt;p&gt;这篇&lt;a href=&quot;http://blog.jobbole.com/63398/&quot;&gt;文章&lt;/a&gt; 来自&lt;a href=&quot;http://blog.jobbole.com&quot;&gt;伯乐在线&lt;/a&gt;，对入门来说非常好，在这里留个记录，方便以后查看。&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Flappy Egg</title>
   <link href="https://guiyuan.github.io/unity3d/2014/12/17/FlappyEgg/"/>
   <updated>2014-12-17T07:14:47+08:00</updated>
   <id>https://guiyuan.github.io/unity3d/2014/12/17/FlappyEgg</id>
   <content type="html">&lt;p&gt;一直听别人说Unity怎么怎么，也看到好多unity3D开发的产品，但是也一直没有仔细去看过，前段时间刚好工作上要用unity3D开发一个Demo，就顺便学习了一下，Demo要的时间也很急，也是边做边学，做完回过头来看看，好多地方都不如意，比较乱，然后学习了一下官网的&lt;a href=&quot;http://unity3d.com/learn/tutorials/projects/survival-shooter&quot;&gt;教程&lt;/a&gt;，这个教程是基于Unity4.6版本的，添加了Unity自己的新UI模块，更便于制作UI。&lt;/p&gt;

&lt;p&gt;为了练练手，就模仿Flapyp bird这款很火的游戏写了一个小作品，因为没有使用什么素材，除了背景从网上找了一张图片外其他都是Unity本来的东西，主角就使用了一个椭圆的球体来代替，看上去就像一个蛋，所以我称之为Flappy Egg，下面是游戏截图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/upload/picture/Unity3D/flappyegg.jpeg&quot; alt=&quot;egg&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;障碍物&lt;/h3&gt;

&lt;p&gt;障碍物是由三部分组成，上下两部分的白色柱子，以及中间透明的可以让egg通过的区域，因为在整个屏幕中一次出现的障碍物最多只有三个，所以我就直接复制了三个放在场景中，当第一个移出屏幕左侧后重新设置位置到屏幕的右侧，高度是随机一个值，以确保可通过区域的高度有变化。下面是整个障碍物移动的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public Vector3 MinPosition;
public Vector3 MaxPosition;

public float Speed;

void FixedUpdate()
{
	Vector3 pos = transform.position;

	pos.x -= Speed * Time.deltaTime;

	if (pos.x &amp;lt; MinPosition.x) 
	{
		pos.x = MaxPosition.x;
		pos.z = Random.Range(MinPosition.z,MaxPosition.z);
	}

	transform.position = pos;
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为egg碰到障碍物就会触发游戏失败，因此障碍物的上下子部分都设置为Trigger Collider,具体代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void OnTriggerEnter(Collider other) 
{
	if (gameObject.name != &quot;Boundary&quot; &amp;amp;&amp;amp; other.tag == &quot;Bird&quot;) 
	{
		// Game Over
		print(&quot;Failed!&quot;);
		gc.GameOver();
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当egg与障碍物一接触就触发游戏失败逻辑。&lt;/p&gt;

&lt;p&gt;在上面的代码中出现了&lt;code&gt;gameObject.name != &quot;Boundary&quot;&lt;/code&gt;，这是因为我把边界处理的代码也写到了同一个类中，整个游戏区域我用一个透明的立方体盒子包围起来，当egg离开这个盒子也就是离开屏幕范围也会导致游戏失败，因此代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void OnTriggerExit(Collider other) 
{
	if (gameObject.name == &quot;Boundary&quot; &amp;amp;&amp;amp; other.tag == &quot;Bird&quot;) 
	{
		gc.GameOver();		
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当egg通过一个障碍物时会给玩家增加一定的得分，因此在障碍物的中间区域也是一个透明的Trigger Collider：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void OnTriggerExit(Collider other) 
{
	if (other.tag == &quot;Bird&quot;) 
	{
		gc.Score(UnitScore);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;egg&quot;&gt;Egg&lt;/h3&gt;
&lt;p&gt;对于egg，只是简单的往下移动，当用户点击的时候会往上移动。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public float Speed;
void FixedUpdate()
{
	if (Input.touchCount &amp;gt; 0)
	//if (Input.GetKey (&quot;space&quot;)) 
	{
		rigidbody.velocity = transform.forward * Speed;
	} 
	else 
	{
		rigidbody.velocity = transform.forward * -Speed * 2;
	}

}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;ui&quot;&gt;UI&lt;/h3&gt;
&lt;p&gt;游戏过程中只是简单的添加了一个得分label，游戏结束后会有一个带有动画的界面如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/upload/picture/Unity3D/gameover.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Game Over 以及 Restart 按钮会有一个从小到大再稍微缩小的动画，这个是通过自定义Animation来实现的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/upload/picture/Unity3D/animation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整个实现过程还是很简单的，代码也没有多少，总的来说Unity3D已经做好了很多东西，简化了整个制作过程。&lt;/p&gt;

&lt;p&gt;最后：整个源码在  &lt;a href=&quot;https://github.com/guiyuan/Flappy-Egg.git&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>在vi中插入时间</title>
   <link href="https://guiyuan.github.io/vi/2014/12/11/DisplayTime/"/>
   <updated>2014-12-11T19:43:15+08:00</updated>
   <id>https://guiyuan.github.io/vi/2014/12/11/DisplayTime</id>
   <content type="html">&lt;p&gt;刚开始想用vi来写markdown文件，在文件头中想插入当前的系统时间，在网上查了下可以用
	&lt;code&gt;:r !date&lt;/code&gt;
来插入，不过格式不是我想要的，这种插入是形如&lt;code&gt;2014年12月11日 星期四 11时49分10秒 CST&lt;/code&gt;这种格式。我想要的是&lt;code&gt;2014-12-11 11:43:15&lt;/code&gt;这种格式的插入。&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://blog.csdn.net/linwhwylb/article/details/6284286&quot;&gt;CSDN&lt;/a&gt;这篇文章中看到可以使用&lt;code&gt;strftime&lt;/code&gt;来进行格式化输出，查了下&lt;code&gt;strftime&lt;/code&gt;的用法，在.vimrc中添加如下两行就可以达到我的目标了：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;:nnoremap&amp;lt;F5&amp;gt; &quot;=strftime(&quot;%F %T&quot;)&amp;lt;CR&amp;gt;gP
:inoremap&amp;lt;F5&amp;gt; &amp;lt;C-R&amp;gt;=strftime(&quot;%F %T&quot;)&amp;lt;CR&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一行是在正常模式下插入，第二行是在编辑模式下进行插入(映射到快捷键F5)。&lt;/p&gt;

&lt;p&gt;下面列一些&lt;code&gt;strftime&lt;/code&gt;的格式化命令说明（摘自&lt;a href=&quot;http://baike.baidu.com/link?url=C-ge9XweA4tpnGvpPNFZA5cok5wy_epKdGXX8Fj6hFLXvUwEL_TtWfZLWzuXzQWzifSEhq_CChpO8PJ-LLk7oK&quot;&gt;百度百科&lt;/a&gt;）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%a 星期几的简写
%A 星期几的全称
%b 月份的简写
%B 月份的全称
%c 标准的日期的时间串
%C 年份的前两位数字
%d 十进制表示的每月的第几天
%D 月/天/年
%e 在两字符域中，十进制表示的每月的第几天
%F 年-月-日
%g 年份的后两位数字，使用基于周的年
%G 年份，使用基于周的年
%h 简写的月份名
%H 24小时制的小时
%I 12小时制的小时
%j 十进制表示的每年的第几天
%m 十进制表示的月份
%M 十时制表示的分钟数
%n 新行符
%p 本地的AM或PM的等价显示
%r 12小时的时间
%R 显示小时和分钟：hh:mm
%S 十进制的秒数
%t 水平制表符
%T 显示时分秒：hh:mm:ss
%u 每周的第几天，星期一为第一天 （值从1到7，星期一为1）
%U 第年的第几周，把星期日作为第一天（值从0到53）
%V 每年的第几周，使用基于周的年
%w 十进制表示的星期几（值从0到6，星期天为0）
%W 每年的第几周，把星期一做为第一天（值从0到53）
%x 标准的日期串
%X 标准的时间串
%y 不带世纪的十进制年份（值从0到99）
%Y 带世纪部分的十制年份
%z，%Z 时区名称，如果不能得到时区名称则返回空字符。
%% 百分号
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Markdown 语法</title>
   <link href="https://guiyuan.github.io/markdown/2014/12/01/markdown%E8%AF%AD%E6%B3%95/"/>
   <updated>2014-12-01T00:00:00+08:00</updated>
   <id>https://guiyuan.github.io/markdown/2014/12/01/markdown语法</id>
   <content type="html">&lt;p&gt;今天终于把这个搭建好了，学习了下markdown的语法，先来实践一下，记录一些markdown的语法。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;强调&lt;/h4&gt;
   	加粗有两种方式，前后用两个星号或者两个下划线包围要加粗的对象，快捷方式cmd+B，例如**加粗** __加粗__
&lt;p&gt;加粗效果：&lt;strong&gt;加粗&lt;/strong&gt; &lt;strong&gt;加粗&lt;/strong&gt;&lt;/p&gt;

   	斜体 跟加粗类似的两种方式，前后各只用一个星号或者一个下划线，例如*斜体* _斜体_
&lt;p&gt;斜体效果：&lt;em&gt;斜体&lt;/em&gt; &lt;em&gt;斜体&lt;/em&gt;
#### 整块引用&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 在要引用的话前面加上&amp;gt;和一个空格，表示这段是引用，可以嵌套使用
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;email&quot;&gt;超链接和Email&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;Email直接用两个尖括号&amp;lt;&amp;gt;括起来,例如&amp;lt;example@example.com&amp;gt;, &amp;lt;example@example.com&amp;gt;


文字链接有两种方式:
1. [Google](https://wwww.google.com)
2. [Google][googleUrl]
	[googleUrl]:https://www.google.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：1. &lt;a href=&quot;https://wwww.google.com&quot;&gt;Google&lt;/a&gt;
2. &lt;a href=&quot;https://www.google.com&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;图片链接也是一样，只不过在［］中不加内容，前面加上一个！号，例如：第一种：![](http://www.baidu.com/img/bdlogo.png) 第二种：![][image]
[image]:http://www.baidu.com/img/bdlogo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果：&lt;img src=&quot;http://www.baidu.com/img/bdlogo.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;转义字符&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;markdown的转义字符使用\，可以转义的有：
\\ 反斜杠
\` 反引号
\* 星号
\_ 下划线
\{\} 大括号
\[\] 中括号
\(\) 小括号
\# 井号
\+ 加号
\- 建号
\. 英文句号
\! 叹号
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 <entry>
   <title>Start</title>
   <link href="https://guiyuan.github.io/2014/12/01/Start/"/>
   <updated>2014-12-01T00:00:00+08:00</updated>
   <id>https://guiyuan.github.io/2014/12/01/Start</id>
   <content type="html">&lt;p&gt;OK, Let’s go!&lt;/p&gt;
</content>
 </entry>
 

</feed>
